import os
import json
import datetime
import requests
from dotenv import load_dotenv

from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, FSInputFile

import kb
import text
from logging_config import logger
from functions import file_to_text, text_to_docx, text_to_pdf, get_dates

# ---------------------------------------------
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# ---------------------------------------------
router = Router()
load_dotenv()

BASE_URL = os.getenv("BASE_URL", "http://localhost:8000/api")
USER_API = f"{BASE_URL}/create-user"
MSG_API = f"{BASE_URL}/create-message"
LLM_API = f"{BASE_URL}/create-llm-message"

# FSM
class GenerateProcess(StatesGroup):
    waiting_file = State()
    generated_text = State()


# ---------------------------------------------
# /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ---------------------------------------------
@router.message(CommandStart())
async def start_handler(msg: Message):
    user_tg_id = msg.from_user.id
    logger.info(f"–ó–∞–ø—É—Å–∫ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_tg_id}")

    try:
        res = requests.post(USER_API)
        if res.status_code != 200:
            raise Exception(res.text)
        data = res.json()
        user_id = data.get("user_id")
        logger.info(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id={user_id}")

        await msg.answer(
            text.greet.format(name=msg.from_user.full_name),
            reply_markup=kb.buttons_menu
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await msg.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# ---------------------------------------------
# /menu
# ---------------------------------------------
@router.message(Command('menu'))
@router.message(F.text == "Menu")
async def menu_handler(msg: Message):
    await msg.answer("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=kb.buttons_menu)


# ---------------------------------------------
# /add_services
# ---------------------------------------------
@router.message(Command('add_services'))
@router.message(F.text == "Add services")
async def services_handler(msg: Message):
    await msg.answer(text.service_text, reply_markup=kb.services_menu)


# ---------------------------------------------
# /generate ‚Äî –Ω–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
# ---------------------------------------------
@router.message(Command('generate'))
@router.message(F.text == "Generate")
async def generate_command(msg: Message, state: FSMContext):
    await msg.answer(text.generate_text, reply_markup=kb.buttons_menu)
    await state.set_state(GenerateProcess.waiting_file)


# ---------------------------------------------
# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ / —Ñ–∞–π–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ---------------------------------------------
@router.message(GenerateProcess.waiting_file)
async def process_generate(msg: Message, state: FSMContext):
    text_input = None

    # 1Ô∏è‚É£ –¢–µ–∫—Å—Ç
    if msg.text:
        text_input = msg.text
    # 2Ô∏è‚É£ –î–æ–∫—É–º–µ–Ω—Ç
    elif msg.document:
        try:
            text_input = await file_to_text(msg.bot, msg.document.file_id)
        except Exception as e:
            await msg.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return
    else:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")
        return

    await msg.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é –ø—Ä–æ—Ç–æ–∫–æ–ª, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        # -----------------------------------------
        # 1Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
        # -----------------------------------------
        payload_msg = {
            "user_id": msg.from_user.id,  # Telegram ID –∫–∞–∫ user_id
            "chat_id": 1,  # –µ—Å–ª–∏ —á–∞—Ç—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
            "text": text_input,
            "is_bot": False,
            "answer_to": None
        }

        res_msg = requests.post(MSG_API, json=payload_msg)
        if res_msg.status_code != 200:
            raise Exception(res_msg.text)
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ API")

        # -----------------------------------------
        # 2Ô∏è‚É£ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
        # -----------------------------------------
        payload_llm = {"chat_id": 1}
        res_llm = requests.post(LLM_API, json=payload_llm)
        if res_llm.status_code != 200:
            raise Exception(res_llm.text)

        llm_data = res_llm.json()["data"]
        txt = llm_data["text"]

        # -----------------------------------------
        # 3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # -----------------------------------------
        await msg.answer(txt, reply_markup=kb.buttons_menu)
        await msg.answer("–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ?", reply_markup=kb.format_menu)

        await state.update_data(generated_text=txt)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å API: {e}")
        await msg.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# ---------------------------------------------
# –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: Word / PDF / –±–µ–∑ —Ñ–∞–π–ª–∞
# ---------------------------------------------
@router.callback_query(F.data.in_(['format_word', 'format_pdf', 'format_no']))
async def process_format_callback(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text_data = data.get("generated_text")

    if not text_data:
        await callback.message.answer("‚ùå –¢–µ–∫—Å—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        await callback.answer()
        return

    try:
        if callback.data == 'format_word':
            path = text_to_docx(text_data)
            file = FSInputFile(path)
            await callback.message.answer_document(file, caption="üìÑ –í–∞—à –ø—Ä–æ—Ç–æ–∫–æ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Word")

        elif callback.data == 'format_pdf':
            path = text_to_pdf(text_data)
            file = FSInputFile(path)
            await callback.message.answer_document(file, caption="üìÑ –í–∞—à –ø—Ä–æ—Ç–æ–∫–æ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF")

        elif callback.data == 'format_no':
            await callback.message.answer("–û–∫–µ–π, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É.", reply_markup=kb.buttons_menu)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.")

    await state.clear()
    await callback.answer()

